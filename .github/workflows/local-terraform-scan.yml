name: Local Terraform Scan (No Azure Auth)

on:
  pull_request:
    branches: [ master, main ]
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  terraform-static-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Download OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
        chmod +x opa
        ./opa version

    - name: Generate Terraform Plan (from examples)
      working-directory: examples
      run: |
        echo "Initializing Terraform..."
        terraform init -backend=false

        echo "Creating Terraform plan..."
        terraform plan -out=tfplan.binary

        echo "Converting plan to JSON..."
        terraform show -json tfplan.binary > tfplan.json

        echo "‚úÖ Terraform plan generated"

    - name: Run OPA Security Scan
      working-directory: examples
      run: |
        echo "üîç Running security scan..."
        echo ""
        ../opa eval \
          --data ../policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format pretty \
          'data.azure.storage.deny' | tee scan-output.txt

    - name: Generate Violation Summary
      working-directory: examples
      run: |
        echo "üìä Generating summary..."
        echo ""

        ../opa eval \
          --data ../policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format pretty \
          'data.azure.storage.violation_summary'

    - name: Create GitHub Summary
      working-directory: examples
      run: |
        echo "## üîí Terraform Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        TOTAL=$(../opa eval \
          --data ../policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format raw \
          'data.azure.storage.violation_summary.total_violations // 0')

        HIGH=$(../opa eval \
          --data ../policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format raw \
          'data.azure.storage.violation_summary.by_severity.HIGH // 0')

        MEDIUM=$(../opa eval \
          --data ../policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format raw \
          'data.azure.storage.violation_summary.by_severity.MEDIUM // 0')

        LOW=$(../opa eval \
          --data ../policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format raw \
          'data.azure.storage.violation_summary.by_severity.LOW // 0')

        echo "### Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|------:|" >> $GITHUB_STEP_SUMMARY
        echo "| üî¥ HIGH | $HIGH |" >> $GITHUB_STEP_SUMMARY
        echo "| üü° MEDIUM | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
        echo "| üü¢ LOW | $LOW |" >> $GITHUB_STEP_SUMMARY
        echo "| **TOTAL** | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Policy Decision (Fail on HIGH)
      working-directory: examples
      run: |
        HIGH_COUNT=$(../opa eval \
          --data ../policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format raw \
          'count([v | v := data.azure.storage.deny[_]; v.severity == "HIGH"])')

        echo "HIGH severity violations found: $HIGH_COUNT"

        if [ "$HIGH_COUNT" -gt 0 ]; then
          echo "‚ùå Pipeline failed: Found $HIGH_COUNT HIGH severity security violations"
          echo ""
          echo "Review the scan output above for details."
          exit 1
        else
          echo "‚úÖ No HIGH severity violations found"
        fi

    - name: Upload Scan Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-scan-results-${{ github.run_number }}
        path: |
          examples/tfplan.json
          examples/scan-output.txt
        retention-days: 30
