name: Azure Integration Test

on:
  workflow_dispatch:
    inputs:
      deploy_to_aks:
        description: 'Deploy scan job to AKS cluster'
        required: false
        type: boolean
        default: false

env:
  AZURE_RESOURCE_GROUP: pp-rg
  AKS_CLUSTER: pp-fips-cbom-demo
  NAMESPACE: tf-static-scan-demo
  LOCATION: eastus

jobs:
  azure-terraform-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: |
          {
            "clientId": "${{ secrets.AQUA_KEY }}",
            "clientSecret": "${{ secrets.AQUA_PASSWORD }}",
            "subscriptionId": "${{ secrets.AQUA_SERVER }}",
            "tenantId": "${{ secrets.AQUA_SECRET }}"
          }

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Download OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
        chmod +x opa
        sudo mv opa /usr/local/bin/

    - name: Create test Azure Storage Account (if needed)
      run: |
        STORAGE_EXISTS=$(az storage account check-name --name tfscantestsa${{ github.run_number }} --query nameAvailable -o tsv)
        if [ "$STORAGE_EXISTS" == "true" ]; then
          echo "Creating test storage account..."
          az storage account create \
            --name tfscantestsa${{ github.run_number }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.LOCATION }} \
            --sku Standard_LRS \
            --kind StorageV2
        fi

    - name: Generate Terraform Plan from Examples
      working-directory: examples
      run: |
        terraform init -backend=false
        terraform plan -out=tfplan.binary
        terraform show -json tfplan.binary > tfplan.json

    - name: Run OPA Security Scan
      run: |
        echo "Running security scan..."
        opa eval \
          --data policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format pretty \
          'data.azure.storage.deny' | tee scan-results.json

    - name: Generate Scan Summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        TOTAL=$(opa eval \
          --data policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format raw \
          'data.azure.storage.violation_summary.total_violations')

        HIGH=$(opa eval \
          --data policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format raw \
          'data.azure.storage.violation_summary.by_severity.HIGH')

        MEDIUM=$(opa eval \
          --data policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format raw \
          'data.azure.storage.violation_summary.by_severity.MEDIUM')

        LOW=$(opa eval \
          --data policies/azure-storage-misconfigurations.rego \
          --input tfplan.json \
          --format raw \
          'data.azure.storage.violation_summary.by_severity.LOW')

        echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| ðŸ”´ HIGH | $HIGH |" >> $GITHUB_STEP_SUMMARY
        echo "| ðŸŸ¡ MEDIUM | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
        echo "| ðŸŸ¢ LOW | $LOW |" >> $GITHUB_STEP_SUMMARY
        echo "| **Total** | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY

    - name: Deploy to AKS (Optional)
      if: ${{ inputs.deploy_to_aks == true }}
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER }} \
          --overwrite-existing

        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

        echo "Namespace ${{ env.NAMESPACE }} ready in AKS cluster ${{ env.AKS_CLUSTER }}"

    - name: Upload Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: azure-scan-results-${{ github.run_number }}
        path: |
          tfplan.json
          scan-results.json
        retention-days: 30
